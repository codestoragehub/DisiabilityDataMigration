// <auto-generated />
using System;
using DisabilityInPortal.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DisabilityInPortal.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DisabilityInPortalDbContext))]
    [Migration("20211219143215_AddSicCodesData")]
    partial class AddSicCodesData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CapabilityNaicsCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("NaicsCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "NaicsCodesCode");

                    b.HasIndex("NaicsCodesCode");

                    b.ToTable("CapabilityNaicsCode", "dbo");
                });

            modelBuilder.Entity("CapabilitySicCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("SicCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "SicCodesCode");

                    b.HasIndex("SicCodesCode");

                    b.ToTable("CapabilitySicCode", "dbo");
                });

            modelBuilder.Entity("CapabilityUkSicCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("UkSicCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "UkSicCodesCode");

                    b.HasIndex("UkSicCodesCode");

                    b.ToTable("CapabilityUkSicCode", "dbo");
                });

            modelBuilder.Entity("CapabilityUnspscCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("UnspscCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "UnspscCodesCode");

                    b.HasIndex("UnspscCodesCode");

                    b.ToTable("CapabilityUnspscCode", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("County")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCodePlus4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AddressDocument", b =>
                {
                    b.Property<int>("AddressDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressDocumentId"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.HasKey("AddressDocumentId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DocumentId");

                    b.ToTable("AddressDocuments", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 1L, 1);

                    b.Property<DateTimeOffset?>("ApplicationApprovedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ApplicationCreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ApplicationExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ApplicationSubmittedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("HowDidYouHearAboutUs")
                        .HasColumnType("int");

                    b.Property<string>("ReferredBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ApplicationCertificationAgency", b =>
                {
                    b.Property<int>("ApplicationCertificationAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationCertificationAgencyId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CertificationAgencyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ApplicationCertificationAgencyId");

                    b.HasIndex("CertificationAgencyId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "CertificationAgencyId");

                    b.ToTable("ApplicationCertificationAgencies", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Audit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditId");

                    b.ToTable("AuditLogs", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Capability", b =>
                {
                    b.Property<int>("CapabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CapabilityId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GeographicalServiceArea")
                        .HasColumnType("int");

                    b.Property<string>("ProductServiceDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("CapabilityId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("Capabilities", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CertificationAgency", b =>
                {
                    b.Property<int>("CertificationAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationAgencyId"), 1L, 1);

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDocumentRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificationAgencyId");

                    b.ToTable("CertificationAgencies", "dbo");

                    b.HasData(
                        new
                        {
                            CertificationAgencyId = 1,
                            DocumentType = 2,
                            IsDocumentRequired = true,
                            Name = "NGLCC"
                        },
                        new
                        {
                            CertificationAgencyId = 2,
                            DocumentType = 2,
                            IsDocumentRequired = true,
                            Name = "WBENC"
                        },
                        new
                        {
                            CertificationAgencyId = 3,
                            DocumentType = 2,
                            IsDocumentRequired = true,
                            Name = "WEConnect International (Global)"
                        },
                        new
                        {
                            CertificationAgencyId = 4,
                            IsDocumentRequired = false,
                            Name = "NMSDC"
                        },
                        new
                        {
                            CertificationAgencyId = 5,
                            IsDocumentRequired = false,
                            Name = "USPAACC"
                        },
                        new
                        {
                            CertificationAgencyId = 6,
                            IsDocumentRequired = false,
                            Name = "NAVOBA"
                        },
                        new
                        {
                            CertificationAgencyId = 7,
                            IsDocumentRequired = false,
                            Name = "NVBDC"
                        },
                        new
                        {
                            CertificationAgencyId = 8,
                            IsDocumentRequired = false,
                            Name = "MSDUK (United Kingdom)"
                        },
                        new
                        {
                            CertificationAgencyId = 9,
                            IsDocumentRequired = false,
                            Name = "CAMSC (Canada)"
                        },
                        new
                        {
                            CertificationAgencyId = 10,
                            IsDocumentRequired = false,
                            Name = "Supply Nation (Australia)"
                        },
                        new
                        {
                            CertificationAgencyId = 11,
                            IsDocumentRequired = false,
                            Name = "SASDC (South Africa)"
                        },
                        new
                        {
                            CertificationAgencyId = 12,
                            IsDocumentRequired = false,
                            Name = "Integrare (Brazil)"
                        });
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("BusinessAcquisition")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BusinessHistory")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyWebsiteAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DoingBusinessAs")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FederalTaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormerCompanyNames")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("IndustryType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBusinessStartedByCurrentOwnership")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContractorCompany")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFranchise")
                        .HasColumnType("bit");

                    b.Property<string>("LegalBusinessName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LegalStructureType")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxIdType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Companies", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Contractor", b =>
                {
                    b.Property<int>("ContractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractorId"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseNumber")
                        .HasColumnType("int");

                    b.Property<string>("TradeSpecialty")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ContractorId");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("DocumentId");

                    b.ToTable("Contractors", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso2Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso3Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tld")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.DisabilityImpact", b =>
                {
                    b.Property<int>("DisabilityImpactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisabilityImpactId"), 1L, 1);

                    b.Property<string>("ApplicantInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.HasKey("DisabilityImpactId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DisabilityImpacts", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Diversity", b =>
                {
                    b.Property<int>("DiversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiversityId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CertificationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CertifyingOrganization")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DiversityType")
                        .HasColumnType("int");

                    b.Property<int>("DiversityTypeValue")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("EthnicityOther")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenderOther")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("DiversityId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Diversities", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentType")
                        .HasMaxLength(270)
                        .HasColumnType("nvarchar(270)");

                    b.Property<string>("EquipmentUsed")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("EquipmentId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.ToTable("Equipments", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityType")
                        .HasColumnType("int");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<decimal>("RentalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("SquareFeet")
                        .HasColumnType("real");

                    b.HasKey("FacilityId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex("RealEstateId");

                    b.ToTable("Facilities", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", b =>
                {
                    b.Property<int>("ManagementAtOutsideFirmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementAtOutsideFirmId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasAnyManagementOutsideAtFirm")
                        .HasColumnType("bit");

                    b.HasKey("ManagementAtOutsideFirmId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("ManagementAtOutsideFirms", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementContribution", b =>
                {
                    b.Property<int>("ManagementContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementContributionId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Equipment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NameOfIndividual")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Other")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RealEstate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ManagementContributionId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ManagementContributions", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementResponsibility", b =>
                {
                    b.Property<int>("ManagementResponsibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementResponsibilityId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool?>("ConductsMarketingAndSales")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasHiringFiringAuthorityForManagementPersonnel")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasSigningAuthorityForChecks")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsResponsibleForSigningContracts")
                        .HasColumnType("bit");

                    b.Property<bool?>("MakesAndApprovesMajorCapitalExpenses")
                        .HasColumnType("bit");

                    b.Property<bool?>("MakesFinancialDecisions")
                        .HasColumnType("bit");

                    b.Property<bool?>("SelectsProjectsOnWhichToBidAndAccept")
                        .HasColumnType("bit");

                    b.Property<bool?>("SignsCosignsForLoansLinesOfCredit")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupervisesDayToDayOperations")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupervisesFieldworkProduction")
                        .HasColumnType("bit");

                    b.Property<string>("WhoActuallyDoesTheBiddingAndEstimating")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ManagementResponsibilityId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("DocumentId");

                    b.ToTable("ManagementResponsibilities", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.NaicsCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("NaicsCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.OutsideFirmIndividual", b =>
                {
                    b.Property<int>("OutsideFirmIndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutsideFirmIndividualId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("FirmWorkingType")
                        .HasColumnType("int");

                    b.Property<string>("IndividualName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ManagementAtOutsideFirmId")
                        .HasColumnType("int");

                    b.Property<int>("ManagementType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("OutsideFirmIndividualId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ManagementAtOutsideFirmId");

                    b.ToTable("OutsideFirmIndividuals", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Authority")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("DailyManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("DisabilityStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Ethinicity")
                        .HasColumnType("int");

                    b.Property<string>("EthinicityOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GenderOther")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsLGBT")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Ownership")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ParticipatesShareVoting")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("USCitizen")
                        .HasColumnType("bit");

                    b.HasKey("OwnerId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Owners", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.RealEstate", b =>
                {
                    b.Property<int>("RealEstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealEstateId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool>("HasFullTimeOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHomeBusinessHeadquarters")
                        .HasColumnType("bit");

                    b.HasKey("RealEstateId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("RealEstates", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SicCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Division")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("IndustryGroup")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("MajorGroup")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("SicCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.TransportationDetail", b =>
                {
                    b.Property<int>("TransportationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportationDetailId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Commodities")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CommonCarrier")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("DoesCompanyInvolveTransportation")
                        .HasColumnType("bit");

                    b.Property<string>("IndependentCarrier")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InsuranceCarrier")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsFleetContracted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFleetLeased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFleetOwned")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingStatus")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TransportationDetailId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("TransportationDetails", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.TrustDetail", b =>
                {
                    b.Property<int>("TrustDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrustDetailId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBenefactor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBusinessControlledByTrust")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGrantor")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIrrevocable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrustee")
                        .HasColumnType("bit");

                    b.HasKey("TrustDetailId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.ToTable("TrustDetails", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.UkSicCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Section")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SectionDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("UkSicCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.UnspscCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("UnspscCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("VehicleLicensePlateId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VehicleUsed")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.ToTable("Vehicles", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStartUpCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUSABasedCompany")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("CapabilityNaicsCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.NaicsCode", null)
                        .WithMany()
                        .HasForeignKey("NaicsCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CapabilitySicCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.SicCode", null)
                        .WithMany()
                        .HasForeignKey("SicCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CapabilityUkSicCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.UkSicCode", null)
                        .WithMany()
                        .HasForeignKey("UkSicCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CapabilityUnspscCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.UnspscCode", null)
                        .WithMany()
                        .HasForeignKey("UnspscCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Address", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AddressDocument", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Address");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Application", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ApplicationCertificationAgency", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("ApplicationCertificationAgencies")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.CertificationAgency", "CertificationAgency")
                        .WithMany("ApplicationCertificationAgencies")
                        .HasForeignKey("CertificationAgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ApplicationCertificationAgency", "DocumentId");

                    b.Navigation("Application");

                    b.Navigation("CertificationAgency");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Capability", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("Capability")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Capability", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Company", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Contractor", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithOne("Contractor")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Contractor", "CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Company");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.DisabilityImpact", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("DisabilityImpacts")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Diversity", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Document", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithMany("Documents")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Equipment", "DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Facility", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Facility", "DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.RealEstate", "RealEstate")
                        .WithMany("Facilities")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Document");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("ManagementAtOutsideFirm")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementContribution", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("ManagementContributions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementResponsibility", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("ManagementResponsibility")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ManagementResponsibility", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.OutsideFirmIndividual", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", "ManagementAtOutsideFirm")
                        .WithMany("OutsideFirmIndividuals")
                        .HasForeignKey("ManagementAtOutsideFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("ManagementAtOutsideFirm");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Owner", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.RealEstate", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("RealEstate")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.RealEstate", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.State", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.TransportationDetail", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("TransportationDetail")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.TransportationDetail", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.TrustDetail", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("TrustDetail")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.TrustDetail", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.TrustDetail", "DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Vehicle", "DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Application", b =>
                {
                    b.Navigation("ApplicationCertificationAgencies");

                    b.Navigation("Capability");

                    b.Navigation("DisabilityImpacts");

                    b.Navigation("ManagementAtOutsideFirm");

                    b.Navigation("ManagementContributions");

                    b.Navigation("ManagementResponsibility");

                    b.Navigation("RealEstate");

                    b.Navigation("TransportationDetail");

                    b.Navigation("TrustDetail");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CertificationAgency", b =>
                {
                    b.Navigation("ApplicationCertificationAgencies");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Company", b =>
                {
                    b.Navigation("Contractor");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", b =>
                {
                    b.Navigation("OutsideFirmIndividuals");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.RealEstate", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
