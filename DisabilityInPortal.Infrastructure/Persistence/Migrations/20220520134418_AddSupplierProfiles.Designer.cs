// <auto-generated />
using System;
using DisabilityInPortal.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DisabilityInPortal.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DisabilityInPortalDbContext))]
    [Migration("20220520134418_AddSupplierProfiles")]
    partial class AddSupplierProfiles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CapabilityNaicsCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("NaicsCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "NaicsCodesCode");

                    b.HasIndex("NaicsCodesCode");

                    b.ToTable("CapabilityNaicsCode", "dbo");
                });

            modelBuilder.Entity("CapabilitySicCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("SicCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "SicCodesCode");

                    b.HasIndex("SicCodesCode");

                    b.ToTable("CapabilitySicCode", "dbo");
                });

            modelBuilder.Entity("CapabilityUkSicCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("UkSicCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "UkSicCodesCode");

                    b.HasIndex("UkSicCodesCode");

                    b.ToTable("CapabilityUkSicCode", "dbo");
                });

            modelBuilder.Entity("CapabilityUnNumberCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("UnNumberCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "UnNumberCodesCode");

                    b.HasIndex("UnNumberCodesCode");

                    b.ToTable("CapabilityUnNumberCode", "dbo");
                });

            modelBuilder.Entity("CapabilityUnspscCode", b =>
                {
                    b.Property<int>("CapabilitiesCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("UnspscCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CapabilitiesCapabilityId", "UnspscCodesCode");

                    b.HasIndex("UnspscCodesCode");

                    b.ToTable("CapabilityUnspscCode", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AdditionalDocument", b =>
                {
                    b.Property<int>("AdditionalDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdditionalDocumentId"), 1L, 1);

                    b.Property<int>("AdditionalDocumentListId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("AdditionalDocumentId");

                    b.HasIndex("AdditionalDocumentListId");

                    b.HasIndex("DocumentId");

                    b.ToTable("AdditionalDocuments", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AdditionalDocumentList", b =>
                {
                    b.Property<int>("AdditionalDocumentListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdditionalDocumentListId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("AdditionalDocumentListId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("AdditionalDocumentLists", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AdditionalInformation", b =>
                {
                    b.Property<int>("AdditionalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdditionalInformationId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("BankruptcyDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("CertificationDenialDocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBeenDeniedCertification")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvolvedInBankruptcy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvolvedInLawsuit")
                        .HasColumnType("bit");

                    b.Property<int?>("LawsuitDocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresAccommodationsDuringSiteVisit")
                        .HasColumnType("bit");

                    b.Property<int?>("SiteVisitAccomodationRequirementsDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("SiteVisitInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AdditionalInformationId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("BankruptcyDocumentId");

                    b.HasIndex("CertificationDenialDocumentId");

                    b.HasIndex("LawsuitDocumentId");

                    b.HasIndex("SiteVisitAccomodationRequirementsDocumentId");

                    b.ToTable("AdditionalInformations", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Ext")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCodePlus4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AddressDocument", b =>
                {
                    b.Property<int>("AddressDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressDocumentId"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.HasKey("AddressDocumentId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DocumentId");

                    b.ToTable("AddressDocuments", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Affidavit", b =>
                {
                    b.Property<int>("AffidavitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AffidavitId"), 1L, 1);

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("IP")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("OS")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AffidavitId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("Affidavits", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 1L, 1);

                    b.Property<DateTimeOffset?>("ApplicationApprovedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ApplicationCreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ApplicationExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ApplicationReference")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int?>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ApplicationSubmittedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ClonedFromApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("HowDidYouHearAboutUs")
                        .HasColumnType("int");

                    b.Property<string>("ReferredBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicationReference");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ApplicationAssignee", b =>
                {
                    b.Property<int>("ApplicationAssigneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationAssigneeId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationAssigneeId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationAssignees", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ApplicationCertificationAgency", b =>
                {
                    b.Property<int>("ApplicationCertificationAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationCertificationAgencyId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CertificationAgencyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ApplicationCertificationAgencyId");

                    b.HasIndex("CertificationAgencyId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "CertificationAgencyId");

                    b.ToTable("ApplicationCertificationAgencies", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ApplicationDecision", b =>
                {
                    b.Property<int>("ApplicationDecisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationDecisionId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CertificationStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("RecertificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ApplicationDecisionId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDecisions", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Audit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("DateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewValues")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OldValues")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("PrimaryKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TableName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("AuditId");

                    b.ToTable("AuditLogs", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.BankAndCreditReference", b =>
                {
                    b.Property<int>("BankAndCreditReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankAndCreditReferenceId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditLine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("HasOutstandingLoans")
                        .HasColumnType("bit");

                    b.Property<string>("InstitutionName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LoanAgreementDocumentId")
                        .HasColumnType("int");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("LoanDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Signatories")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TypeOfAccount")
                        .HasColumnType("int");

                    b.HasKey("BankAndCreditReferenceId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LoanAgreementDocumentId");

                    b.ToTable("BankAndCreditReferences", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.BusinessRelationship", b =>
                {
                    b.Property<int>("BusinessRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessRelationshipId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("ExplanationOfOralOrImpliedAgreement")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("HasSubsidiariesOrAffiliate")
                        .HasColumnType("bit");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.HasKey("BusinessRelationshipId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId");

                    b.ToTable("BusinessRelationships", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Capability", b =>
                {
                    b.Property<int>("CapabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CapabilityId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GeographicalServiceArea")
                        .HasColumnType("int");

                    b.Property<string>("ProductServiceDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("CapabilityId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("Capabilities", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CertificationAgency", b =>
                {
                    b.Property<int>("CertificationAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationAgencyId"), 1L, 1);

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDocumentRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternationalOrganisation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsOrganisation")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CertificationAgencyId");

                    b.ToTable("CertificationAgencies", "dbo");

                    b.HasData(
                        new
                        {
                            CertificationAgencyId = 1,
                            DocumentType = 2,
                            IsDocumentRequired = true,
                            IsInternationalOrganisation = false,
                            IsUsOrganisation = true,
                            Name = "NGLCC"
                        },
                        new
                        {
                            CertificationAgencyId = 2,
                            DocumentType = 2,
                            IsDocumentRequired = true,
                            IsInternationalOrganisation = false,
                            IsUsOrganisation = true,
                            Name = "WBENC"
                        },
                        new
                        {
                            CertificationAgencyId = 3,
                            IsDocumentRequired = false,
                            IsInternationalOrganisation = true,
                            IsUsOrganisation = false,
                            Name = "WEConnect International (Global)"
                        },
                        new
                        {
                            CertificationAgencyId = 4,
                            DocumentType = 2,
                            IsDocumentRequired = true,
                            IsInternationalOrganisation = false,
                            IsUsOrganisation = true,
                            Name = "NMSDC"
                        },
                        new
                        {
                            CertificationAgencyId = 6,
                            DocumentType = 2,
                            IsDocumentRequired = true,
                            IsInternationalOrganisation = false,
                            IsUsOrganisation = true,
                            Name = "NAVOBA"
                        },
                        new
                        {
                            CertificationAgencyId = 7,
                            IsDocumentRequired = false,
                            IsInternationalOrganisation = true,
                            IsUsOrganisation = false,
                            Name = "MSDUK (United Kingdom)"
                        },
                        new
                        {
                            CertificationAgencyId = 8,
                            IsDocumentRequired = false,
                            IsInternationalOrganisation = true,
                            IsUsOrganisation = false,
                            Name = "CAMSC (Canada)"
                        },
                        new
                        {
                            CertificationAgencyId = 9,
                            IsDocumentRequired = false,
                            IsInternationalOrganisation = true,
                            IsUsOrganisation = false,
                            Name = "Supply Nation (Australia)"
                        },
                        new
                        {
                            CertificationAgencyId = 10,
                            IsDocumentRequired = false,
                            IsInternationalOrganisation = true,
                            IsUsOrganisation = false,
                            Name = "SASDC (South Africa)"
                        },
                        new
                        {
                            CertificationAgencyId = 11,
                            IsDocumentRequired = false,
                            IsInternationalOrganisation = true,
                            IsUsOrganisation = false,
                            Name = "Integrare (Brazil)"
                        },
                        new
                        {
                            CertificationAgencyId = 12,
                            DocumentType = 41,
                            IsDocumentRequired = true,
                            IsInternationalOrganisation = false,
                            IsUsOrganisation = true,
                            Name = "CVE - VA VERIFIED"
                        });
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CommitteeReviewIssue", b =>
                {
                    b.Property<int>("CommitteeReviewIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommitteeReviewIssueId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Issue")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Resolution")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SiteVisitReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("CommitteeReviewIssueId");

                    b.HasIndex("SiteVisitReviewId");

                    b.ToTable("CommitteeReviewIssues", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<int>("BusinessAcquisitionType")
                        .HasColumnType("int");

                    b.Property<string>("BusinessHistory")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CompanyWebsiteAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DoingBusinessAs")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FederalTaxId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FormerCompanyNames")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("IndustryType")
                        .HasColumnType("int");

                    b.Property<string>("IndustryTypeOther")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsBusinessStartedByCurrentOwnership")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContractorCompany")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFranchise")
                        .HasColumnType("bit");

                    b.Property<string>("LegalBusinessName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxIdType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Companies", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CompanyHistoryAndOwnership", b =>
                {
                    b.Property<int>("CompanyHistoryAndOwnershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyHistoryAndOwnershipId"), 1L, 1);

                    b.Property<string>("BecomeMajorityOwnerOther")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("BussinessStatus")
                        .HasColumnType("int");

                    b.Property<int>("CompanyOwnershipAcquiredYear")
                        .HasColumnType("int");

                    b.Property<string>("CompanyPreviousName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("CompanyTotalYears")
                        .HasColumnType("int");

                    b.Property<string>("HistoryOwnershipSectionComments")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("MajorityOwnerStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("OwnerCompanyOwnershipPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OwnerVotingStockPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SiteVisitReviewId")
                        .HasColumnType("int");

                    b.Property<string>("WhyStartOrBoughtCompany")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("CompanyHistoryAndOwnershipId");

                    b.HasIndex("SiteVisitReviewId")
                        .IsUnique();

                    b.ToTable("CompanyHistoryAndOwnerships", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Contractor", b =>
                {
                    b.Property<int>("ContractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractorId"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TradeSpecialty")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("ContractorId");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("DocumentId");

                    b.ToTable("Contractors", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ContractReference", b =>
                {
                    b.Property<int>("ContractReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractReferenceId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerOrRepresentative")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CompanyOrOrganizationName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<decimal>("DollarValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductOrService")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("ContractReferenceId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId");

                    b.ToTable("ContractReferences", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ContributionOfCapitalAndExpertise", b =>
                {
                    b.Property<int>("ContributionOfCapitalAndExpertiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContributionOfCapitalAndExpertiseId"), 1L, 1);

                    b.Property<string>("CircumstanceOfLoanTermsForRepayment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("HasAnyCurrentLoans")
                        .HasColumnType("bit");

                    b.Property<bool>("HasOtherIndividualsMadeContribution")
                        .HasColumnType("bit");

                    b.Property<string>("OtherContributionOfEquipment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OtherContributionOfExperience")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OtherContributionOfMoney")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OtherContributionOfOther")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OtherContributionOfRealEstate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SiteVisitReviewId")
                        .HasColumnType("int");

                    b.Property<string>("SiteVisitorsComment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SourceOfExpertise")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YourContributionOfEquipment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YourContributionOfExperience")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YourContributionOfMoney")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YourContributionOfOther")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YourContributionOfRealEstate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("ContributionOfCapitalAndExpertiseId");

                    b.HasIndex("SiteVisitReviewId")
                        .IsUnique();

                    b.ToTable("ContributionOfCapitalAndExpertises", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("Currency")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Iso2Code")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Iso3Code")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Tld")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.DisabilityImpact", b =>
                {
                    b.Property<int>("DisabilityImpactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisabilityImpactId"), 1L, 1);

                    b.Property<string>("ApplicantInformation")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.HasKey("DisabilityImpactId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("DisabilityImpacts", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.DisabilityImpactDocument", b =>
                {
                    b.Property<int>("DisabilityImpactDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisabilityImpactDocumentId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("DisabilityImpactDocumentType")
                        .HasColumnType("int");

                    b.Property<int>("DisabilityImpactId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("DisabilityImpactDocumentId");

                    b.HasIndex("DisabilityImpactId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DisabilityImpactDocuments", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Diversity", b =>
                {
                    b.Property<int>("DiversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiversityId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CertificationNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CertifyingOrganization")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DiversityType")
                        .HasColumnType("int");

                    b.Property<string>("DiversityTypeOther")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("DiversityId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Diversities", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.EmployeesCompensation", b =>
                {
                    b.Property<int>("EmployeesCompensationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeesCompensationId"), 1L, 1);

                    b.Property<string>("FiringProcedures")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("HiringProcedures")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("IfNoWhyNotAndWhoIs")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsHighestPaidPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHiringAndFiring")
                        .HasColumnType("bit");

                    b.Property<string>("NumberOfFullAndPartTimeEmployees")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SiteVisitReviewId")
                        .HasColumnType("int");

                    b.Property<string>("SiteVisitorsComment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("EmployeesCompensationId");

                    b.HasIndex("SiteVisitReviewId")
                        .IsUnique();

                    b.ToTable("EmployeesCompensations", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentType")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("EquipmentUsed")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("EquipmentId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.ToTable("Equipments", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityType")
                        .HasColumnType("int");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<decimal>("RentalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FacilityId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex("RealEstateId");

                    b.ToTable("Facilities", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.FinancialSizeInfo", b =>
                {
                    b.Property<int>("FinancialSizeInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialSizeInfoId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentEmployeesNo")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryType")
                        .HasColumnType("int");

                    b.Property<string>("IndustryTypeOther")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("PrimarySourceOfIncome")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("RecentItemizedPayrollId")
                        .HasColumnType("int");

                    b.Property<string>("ServicesProvided")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("FinancialSizeInfoId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("DocumentId");

                    b.HasIndex("RecentItemizedPayrollId");

                    b.ToTable("FinancialSizeInfos", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Income", b =>
                {
                    b.Property<int>("IncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomeId"), 1L, 1);

                    b.Property<int?>("BalanceSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("FederalTaxReturnId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialSizeInfoId")
                        .HasColumnType("int");

                    b.Property<int>("IncomeType")
                        .HasColumnType("int");

                    b.Property<int?>("ProfitLossStatementId")
                        .HasColumnType("int");

                    b.Property<int?>("SsdStatementId")
                        .HasColumnType("int");

                    b.Property<int?>("SsiStatementId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<decimal>("YearIncome")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IncomeId");

                    b.HasIndex("BalanceSheetId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FederalTaxReturnId");

                    b.HasIndex("FinancialSizeInfoId");

                    b.HasIndex("ProfitLossStatementId");

                    b.HasIndex("SsdStatementId");

                    b.HasIndex("SsiStatementId");

                    b.ToTable("Income", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InvoiceReference")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("int");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("StripePaymentMethod")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("Invoices", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceItemId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("InvoiceItemId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.LegalStructure", b =>
                {
                    b.Property<int>("LegalStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LegalStructureId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("LegalStructureType")
                        .HasColumnType("int");

                    b.Property<string>("LegalStructureTypeOther")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("LegalStructureId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.ToTable("LegalStructures", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.LegalStructureDocument", b =>
                {
                    b.Property<int>("LegalStructureDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LegalStructureDocumentId"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("LegalStructureDocumentTypeValue")
                        .HasColumnType("int");

                    b.Property<int>("LegalStructureId")
                        .HasColumnType("int");

                    b.HasKey("LegalStructureDocumentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LegalStructureId");

                    b.ToTable("LegalStructureDocuments", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", b =>
                {
                    b.Property<int>("ManagementAtOutsideFirmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementAtOutsideFirmId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasAnyManagementOutsideAtFirm")
                        .HasColumnType("bit");

                    b.HasKey("ManagementAtOutsideFirmId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("ManagementAtOutsideFirms", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementChange", b =>
                {
                    b.Property<int>("ManagementChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementChangeId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool>("HasOrIntendToEnterIntoAnyTypeOfAgreement")
                        .HasColumnType("bit");

                    b.HasKey("ManagementChangeId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("ManagementChanges", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementChangeAgreement", b =>
                {
                    b.Property<int>("ManagementChangeAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementChangeAgreementId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ManagementChangeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ManagementChangeAgreementId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ManagementChangeId");

                    b.ToTable("ManagementChangeAgreements", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementContribution", b =>
                {
                    b.Property<int>("ManagementContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementContributionId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Equipment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Other")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("RealEstate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ManagementContributionId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("ManagementContributions", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementResponsibility", b =>
                {
                    b.Property<int>("ManagementResponsibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementResponsibilityId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("ManagementResponsibilityId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("ManagementResponsibilities", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementResponsibilityOwner", b =>
                {
                    b.Property<int>("ManagementResponsibilityOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementResponsibilityOwnerId"), 1L, 1);

                    b.Property<bool?>("ConductsMarketingAndSales")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasHiringFiringAuthorityForManagementPersonnel")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasSigningAuthorityForChecks")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsResponsibleForSigningContracts")
                        .HasColumnType("bit");

                    b.Property<bool?>("MakesAndApprovesMajorCapitalExpenses")
                        .HasColumnType("bit");

                    b.Property<bool?>("MakesFinancialDecisions")
                        .HasColumnType("bit");

                    b.Property<int>("ManagementResponsibilityId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<bool?>("SelectsProjectsOnWhichToBidAndAccept")
                        .HasColumnType("bit");

                    b.Property<bool?>("SignsCosignsForLoansLinesOfCredit")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupervisesDayToDayOperations")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupervisesFieldworkProduction")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ManagementResponsibilityOwnerId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ManagementResponsibilityId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("ManagementResponsibilityOwners", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"), 1L, 1);

                    b.Property<int>("OperationAndControlId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerDuties")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("OperationAndControlId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Managers", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.NaicsCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("NaicsCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeId"), 1L, 1);

                    b.Property<int>("ApplicantOfficeLocation")
                        .HasColumnType("int");

                    b.Property<bool>("HasApplicantSharedSpace")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirmNamePubliclyDisplayed")
                        .HasColumnType("bit");

                    b.Property<int>("OfficeSpaceType")
                        .HasColumnType("int");

                    b.Property<string>("OfficeSpaceTypeOther")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OtherSharingSpaceFirmName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("PrimaryBusinessOfOtherFirms")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SiteVisitReviewId")
                        .HasColumnType("int");

                    b.HasKey("OfficeId");

                    b.HasIndex("SiteVisitReviewId")
                        .IsUnique();

                    b.ToTable("Offices", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.OperationAndControl", b =>
                {
                    b.Property<int>("OperationAndControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationAndControlId"), 1L, 1);

                    b.Property<string>("BusinessPlanForCompanyFuture")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CompanyBiddingOrEstimatingProcedures")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("HowDecisionsMadeWhenOwnerUnavailable")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("HowManySignaturesRequired")
                        .HasColumnType("int");

                    b.Property<bool>("IsWorkingForOtherCompany")
                        .HasColumnType("bit");

                    b.Property<string>("NameAndTypeOfOtherCompany")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OperationSectionComments")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OwnerDutiesAndResponsibilities")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SiteVisitReviewId")
                        .HasColumnType("int");

                    b.Property<int>("TimedevoteToBusiness")
                        .HasColumnType("int");

                    b.Property<string>("TitleAndResponsibilityAtOtherCompany")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoActuallyBiddingAndEstimating")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoConductMarketingSales")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoHasFinalWordOnDecision")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoHasSignatureAuthority")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoMakesApprovesPurchases")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoMakesFinancialDecision")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoResponsibleForSigningContracts")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoSelectsProjectsToBid")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoSupervisesFieldwork")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("WhoSupervisesOperations")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("OperationAndControlId");

                    b.HasIndex("SiteVisitReviewId")
                        .IsUnique();

                    b.ToTable("OperationAndControls", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.OutsideFirmIndividual", b =>
                {
                    b.Property<int>("OutsideFirmIndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutsideFirmIndividualId"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("FirmWorkingType")
                        .HasColumnType("int");

                    b.Property<int>("ManagementAtOutsideFirmId")
                        .HasColumnType("int");

                    b.Property<int>("ManagementType")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("OutsideFirmIndividualId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ManagementAtOutsideFirmId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("OutsideFirmIndividuals", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("DailyManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("DisabilityStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Ethinicity")
                        .HasColumnType("int");

                    b.Property<string>("EthinicityOther")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GenderOther")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsLGBT")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Ownership")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ParticipatesShareVoting")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("USCitizen")
                        .HasColumnType("bit");

                    b.HasKey("OwnerId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Owners", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentIntentId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("PaymentId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("PaymentIntentId")
                        .IsUnique();

                    b.ToTable("Payments", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsExpeditedApplication")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecertification")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDaysToExpedite")
                        .HasColumnType("int");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("StripePaymentMethod")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("PaymentDetails", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.PaymentIntent", b =>
                {
                    b.Property<int>("PaymentIntentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentIntentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentIntentStatus")
                        .HasColumnType("int");

                    b.Property<string>("StripePaymentIntentId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("StripePaymentMethod")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("PaymentIntentId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("PaymentIntents", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.RealEstate", b =>
                {
                    b.Property<int>("RealEstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealEstateId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool>("HasFullTimeOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHomeBusinessHeadquarters")
                        .HasColumnType("bit");

                    b.HasKey("RealEstateId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("RealEstates", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SectionReview", b =>
                {
                    b.Property<int>("SectionReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionReviewId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("DoesSectionPass")
                        .HasColumnType("bit");

                    b.Property<int>("ReviewType")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SectionType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SectionReviewId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SectionReviews", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SicCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Division")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("IndustryGroup")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("MajorGroup")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("SicCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SiteVisitOtherOwner", b =>
                {
                    b.Property<int>("SiteVisitOtherOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteVisitOtherOwnerId"), 1L, 1);

                    b.Property<int>("CompanyHistoryAndOwnershipId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("SiteVisitReviewId")
                        .HasColumnType("int");

                    b.Property<decimal>("VotingPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SiteVisitOtherOwnerId");

                    b.HasIndex("CompanyHistoryAndOwnershipId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SiteVisitReviewId");

                    b.ToTable("SiteVisitOtherOwners", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SiteVisitReview", b =>
                {
                    b.Property<int>("SiteVisitReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteVisitReviewId"), 1L, 1);

                    b.Property<string>("AdditionalSiteVisitorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApplicantCompanyVisited")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsCapitalExpertiseReview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployeesCompensationReview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFormDetailsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOperationAndControlReview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherSectionReview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwnershipReview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSiteVisitInPersonOrVirtual")
                        .HasColumnType("bit");

                    b.Property<string>("OtherReviewSectionName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Recommendation")
                        .HasColumnType("int");

                    b.Property<string>("RecommendationReasons")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<DateTimeOffset?>("SiteVisitDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SiteVisitorFirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SiteVisitorLastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SiteVisitReviewId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("SiteVisitReviews", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SiteVisitReviewOwner", b =>
                {
                    b.Property<int>("SiteVisitReviewOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteVisitReviewOwnerId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("SiteVisitReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("SiteVisitReviewOwnerId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("SiteVisitReviewId", "OwnerId");

                    b.ToTable("SiteVisitReviewOwners", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfile", b =>
                {
                    b.Property<int>("SupplierProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProfileId"), 1L, 1);

                    b.Property<int>("CerificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CertificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CertificationExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CertificationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyWebsiteAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContractorLicenseNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ContractorTradeSpecialty")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DoingBusinessAs")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Facebooklink")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FederalTaxId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FormerCompanyNames")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("GrossIncome2ndLastYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossIncome3rdLastYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossIncomeLastYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("HowDidYouHearAboutUs")
                        .HasColumnType("int");

                    b.Property<int>("IndustryType")
                        .HasColumnType("int");

                    b.Property<string>("IndustryTypeOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFranchise")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryOwnerLGBTQ")
                        .HasColumnType("bit");

                    b.Property<string>("LegalBusinessName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("NetIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumOfYearInBusiness")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<string>("OtherHowDidYouHearAboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerContactMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimaryOwnerEthnicity")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxIdType")
                        .HasColumnType("int");

                    b.Property<string>("Twiterlink")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoLink")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("SupplierProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("SupplierProfiles", "sp");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Ext")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCodePlus4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("SupplierProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("SupplierProfileAddresses", "sp");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileCapability", b =>
                {
                    b.Property<int>("SupplierProfileCapabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProfileCapabilityId"), 1L, 1);

                    b.Property<int>("GeographicalServiceArea")
                        .HasColumnType("int");

                    b.Property<string>("ProductServiceDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SupplierProfileId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SupplierProfileCapabilityId");

                    b.HasIndex("SupplierProfileId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("SupplierProfileCapabilities", "sp");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileCertificationAgency", b =>
                {
                    b.Property<int>("SupplierProfileCertificationAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProfileCertificationAgencyId"), 1L, 1);

                    b.Property<int>("CertificationAgencyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("SupplierProfileDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierProfileId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("SupplierProfileCertificationAgencyId");

                    b.HasIndex("CertificationAgencyId");

                    b.HasIndex("SupplierProfileDocumentId");

                    b.HasIndex("SupplierProfileId");

                    b.ToTable("SupplierProfileCertificationAgencies", "sp");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileContractReference", b =>
                {
                    b.Property<int>("SupplierProfileContractReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProfileContractReferenceId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerOrRepresentative")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CompanyOrOrganizationName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal>("DollarValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductOrService")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("SupplierProfileDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierProfileId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SupplierProfileContractReferenceId");

                    b.HasIndex("AddressId");

                    b.HasIndex("SupplierProfileDocumentId");

                    b.HasIndex("SupplierProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("SupplierProfileContractReferences", "sp");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileDocument", b =>
                {
                    b.Property<int>("SupplierProfileDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProfileDocumentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SupplierProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SupplierProfileDocumentId");

                    b.HasIndex("SupplierProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("SupplierProfileDocuments", "sp");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileLegalStructure", b =>
                {
                    b.Property<int>("SupplierProfileLegalStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierProfileLegalStructureId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LegalStructureType")
                        .HasColumnType("int");

                    b.Property<string>("LegalStructureTypeOther")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("SupplierProfileId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("SupplierProfileLegalStructureId");

                    b.HasIndex("SupplierProfileId");

                    b.ToTable("SupplierProfileLegalStructure", "sp");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.TransportationDetail", b =>
                {
                    b.Property<int>("TransportationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportationDetailId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Commodities")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CommonCarrier")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("ContractDocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("DoesCompanyInvolveTransportation")
                        .HasColumnType("bit");

                    b.Property<string>("IndependentCarrier")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("InsuranceCarrier")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsFleetContracted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFleetLeased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFleetOwned")
                        .HasColumnType("bit");

                    b.Property<int?>("LeaseDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("OperatingStatus")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("TransportationDetailId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("ContractDocumentId");

                    b.HasIndex("LeaseDocumentId");

                    b.ToTable("TransportationDetails", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.TrustDetail", b =>
                {
                    b.Property<int>("TrustDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrustDetailId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBenefactor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBusinessControlledByTrust")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGrantor")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIrrevocable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrustee")
                        .HasColumnType("bit");

                    b.HasKey("TrustDetailId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.ToTable("TrustDetails", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.UkSicCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Section")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SectionDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("UkSicCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.UnNumberCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("UnNumberCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.UnspscCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Code");

                    b.HasIndex("Description");

                    b.ToTable("UnspscCodes", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("VehicleLicensePlateId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VehicleUsed")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("VehicleId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.ToTable("Vehicles", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.WorkflowHistoryEvent", b =>
                {
                    b.Property<int>("WorkflowHistoryEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkflowHistoryEventId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationStatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApplicationWorkflowAction")
                        .HasColumnType("int");

                    b.Property<int>("NewApplicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("OldApplicationStatus")
                        .HasColumnType("int");

                    b.HasKey("WorkflowHistoryEventId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("WorkflowHistoryEvents", "dbo");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStartUpCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUSABasedCompany")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserReference")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("VeteranStatusType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserReference");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("NaicsCodeSupplierProfileCapability", b =>
                {
                    b.Property<string>("NaicsCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .HasColumnType("int");

                    b.HasKey("NaicsCodesCode", "SupplierProfileCapabilitiesSupplierProfileCapabilityId");

                    b.HasIndex("SupplierProfileCapabilitiesSupplierProfileCapabilityId");

                    b.ToTable("NaicsCodeSupplierProfileCapability", "dbo");
                });

            modelBuilder.Entity("SicCodeSupplierProfileCapability", b =>
                {
                    b.Property<string>("SicCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .HasColumnType("int");

                    b.HasKey("SicCodesCode", "SupplierProfileCapabilitiesSupplierProfileCapabilityId");

                    b.HasIndex("SupplierProfileCapabilitiesSupplierProfileCapabilityId");

                    b.ToTable("SicCodeSupplierProfileCapability", "dbo");
                });

            modelBuilder.Entity("SupplierProfileCapabilityUkSicCode", b =>
                {
                    b.Property<int>("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("UkSicCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SupplierProfileCapabilitiesSupplierProfileCapabilityId", "UkSicCodesCode");

                    b.HasIndex("UkSicCodesCode");

                    b.ToTable("SupplierProfileCapabilityUkSicCode", "dbo");
                });

            modelBuilder.Entity("SupplierProfileCapabilityUnNumberCode", b =>
                {
                    b.Property<int>("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("UnNumberCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SupplierProfileCapabilitiesSupplierProfileCapabilityId", "UnNumberCodesCode");

                    b.HasIndex("UnNumberCodesCode");

                    b.ToTable("SupplierProfileCapabilityUnNumberCode", "dbo");
                });

            modelBuilder.Entity("SupplierProfileCapabilityUnspscCode", b =>
                {
                    b.Property<int>("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("UnspscCodesCode")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SupplierProfileCapabilitiesSupplierProfileCapabilityId", "UnspscCodesCode");

                    b.HasIndex("UnspscCodesCode");

                    b.ToTable("SupplierProfileCapabilityUnspscCode", "dbo");
                });

            modelBuilder.Entity("CapabilityNaicsCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.NaicsCode", null)
                        .WithMany()
                        .HasForeignKey("NaicsCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CapabilitySicCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.SicCode", null)
                        .WithMany()
                        .HasForeignKey("SicCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CapabilityUkSicCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.UkSicCode", null)
                        .WithMany()
                        .HasForeignKey("UkSicCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CapabilityUnNumberCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.UnNumberCode", null)
                        .WithMany()
                        .HasForeignKey("UnNumberCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CapabilityUnspscCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Capability", null)
                        .WithMany()
                        .HasForeignKey("CapabilitiesCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.UnspscCode", null)
                        .WithMany()
                        .HasForeignKey("UnspscCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AdditionalDocument", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.AdditionalDocumentList", "AdditionalDocumentList")
                        .WithMany("AdditionalDocuments")
                        .HasForeignKey("AdditionalDocumentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("AdditionalDocumentList");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AdditionalDocumentList", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("AdditionalDocumentList")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.AdditionalDocumentList", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AdditionalInformation", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("AdditionalInformation")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.AdditionalInformation", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "BankruptcyDocument")
                        .WithMany()
                        .HasForeignKey("BankruptcyDocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "CertificationDenialDocument")
                        .WithMany()
                        .HasForeignKey("CertificationDenialDocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "LawsuitDocument")
                        .WithMany()
                        .HasForeignKey("LawsuitDocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "SiteVisitAccomodationRequirementsDocument")
                        .WithMany()
                        .HasForeignKey("SiteVisitAccomodationRequirementsDocumentId");

                    b.Navigation("Application");

                    b.Navigation("BankruptcyDocument");

                    b.Navigation("CertificationDenialDocument");

                    b.Navigation("LawsuitDocument");

                    b.Navigation("SiteVisitAccomodationRequirementsDocument");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Address", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("AddressList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AddressDocument", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Address");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Affidavit", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("Affidavit")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Affidavit", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Application", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ApplicationAssignee", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("ApplicationAssignees")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ApplicationCertificationAgency", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("ApplicationCertificationAgencies")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.CertificationAgency", "CertificationAgency")
                        .WithMany("ApplicationCertificationAgencies")
                        .HasForeignKey("CertificationAgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ApplicationCertificationAgency", "DocumentId");

                    b.Navigation("Application");

                    b.Navigation("CertificationAgency");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ApplicationDecision", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.BankAndCreditReference", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("BankAndCreditReferences")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "LoanAgreementDocument")
                        .WithMany()
                        .HasForeignKey("LoanAgreementDocumentId");

                    b.Navigation("Address");

                    b.Navigation("Application");

                    b.Navigation("Document");

                    b.Navigation("LoanAgreementDocument");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.BusinessRelationship", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("BusinessRelationships")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Address");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Capability", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("Capability")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Capability", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CommitteeReviewIssue", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SiteVisitReview", "SiteVisitReview")
                        .WithMany("CommitteeReviewIssues")
                        .HasForeignKey("SiteVisitReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteVisitReview");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Company", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CompanyHistoryAndOwnership", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SiteVisitReview", "SiteVisitReview")
                        .WithOne("CompanyHistoryAndOwnership")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.CompanyHistoryAndOwnership", "SiteVisitReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteVisitReview");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Contractor", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithOne("Contractor")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Contractor", "CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Company");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ContractReference", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("ContractReferenceList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Address");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ContributionOfCapitalAndExpertise", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SiteVisitReview", "SiteVisitReview")
                        .WithOne("ContributionOfCapitalAndExpertise")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ContributionOfCapitalAndExpertise", "SiteVisitReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteVisitReview");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.DisabilityImpact", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("DisabilityImpact")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.DisabilityImpact", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.DisabilityImpactDocument", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.DisabilityImpact", "DisabilityImpact")
                        .WithMany("DisabilityImpactDocuments")
                        .HasForeignKey("DisabilityImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("DisabilityImpact");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Diversity", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("DiversityList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Document", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithMany("Documents")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.EmployeesCompensation", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SiteVisitReview", "SiteVisitReview")
                        .WithOne("EmployeesCompensation")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.EmployeesCompensation", "SiteVisitReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteVisitReview");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("Equipments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Equipment", "DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Facility", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Facility", "DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.RealEstate", "RealEstate")
                        .WithMany("Facilities")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Document");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.FinancialSizeInfo", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("FinancialSizeInfo")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.FinancialSizeInfo", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "RecentItemizedPayroll")
                        .WithMany()
                        .HasForeignKey("RecentItemizedPayrollId");

                    b.Navigation("Application");

                    b.Navigation("Document");

                    b.Navigation("RecentItemizedPayroll");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Income", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "BalanceSheet")
                        .WithMany()
                        .HasForeignKey("BalanceSheetId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "FederalTaxReturn")
                        .WithMany()
                        .HasForeignKey("FederalTaxReturnId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.FinancialSizeInfo", "FinancialSizeInfo")
                        .WithMany("Incomes")
                        .HasForeignKey("FinancialSizeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "ProfitLossStatement")
                        .WithMany()
                        .HasForeignKey("ProfitLossStatementId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "SsdStatement")
                        .WithMany()
                        .HasForeignKey("SsdStatementId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "SsiStatement")
                        .WithMany()
                        .HasForeignKey("SsiStatementId");

                    b.Navigation("BalanceSheet");

                    b.Navigation("Document");

                    b.Navigation("FederalTaxReturn");

                    b.Navigation("FinancialSizeInfo");

                    b.Navigation("ProfitLossStatement");

                    b.Navigation("SsdStatement");

                    b.Navigation("SsiStatement");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("Invoice")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Invoice", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.LegalStructure", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithMany("LegalStructureList")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Application");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.LegalStructureDocument", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.LegalStructure", "LegalStructure")
                        .WithMany("LegalStructureDocuments")
                        .HasForeignKey("LegalStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Document");

                    b.Navigation("LegalStructure");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("ManagementAtOutsideFirm")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementChange", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("ManagementChange")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ManagementChange", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementChangeAgreement", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.ManagementChange", "ManagementChange")
                        .WithMany("ManagementChangeAgreements")
                        .HasForeignKey("ManagementChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("ManagementChange");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementContribution", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("ManagementContributions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Owner", "Owner")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ManagementContribution", "OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementResponsibility", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("ManagementResponsibility")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ManagementResponsibility", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Application");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementResponsibilityOwner", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.ManagementResponsibility", "ManagementResponsibility")
                        .WithMany("ManagementResponsibilityOwners")
                        .HasForeignKey("ManagementResponsibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Owner", "Owner")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.ManagementResponsibilityOwner", "OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("ManagementResponsibility");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Manager", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.OperationAndControl", "OperationAndControl")
                        .WithMany("Managers")
                        .HasForeignKey("OperationAndControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationAndControl");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Office", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SiteVisitReview", "SiteVisitReview")
                        .WithOne("Office")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Office", "SiteVisitReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteVisitReview");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.OperationAndControl", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SiteVisitReview", "SiteVisitReview")
                        .WithOne("OperationAndControl")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.OperationAndControl", "SiteVisitReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteVisitReview");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.OutsideFirmIndividual", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", "ManagementAtOutsideFirm")
                        .WithMany("OutsideFirmIndividuals")
                        .HasForeignKey("ManagementAtOutsideFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Owner", "Owner")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.OutsideFirmIndividual", "OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("ManagementAtOutsideFirm");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Owner", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("Owners")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Country");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Payment", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Invoice", "Invoice")
                        .WithOne("Payment")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Payment", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.PaymentIntent", "PaymentIntent")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Payment", "PaymentIntentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PaymentIntent");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.PaymentDetail", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("PaymentDetail")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.PaymentDetail", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.PaymentIntent", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Invoice", "Invoice")
                        .WithMany("PaymentIntents")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.RealEstate", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("RealEstate")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.RealEstate", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SectionReview", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Application");

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SiteVisitOtherOwner", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.CompanyHistoryAndOwnership", "CompanyHistoryAndOwnership")
                        .WithMany("SiteVisitOtherOwners")
                        .HasForeignKey("CompanyHistoryAndOwnershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.SiteVisitReview", "SiteVisitReview")
                        .WithMany()
                        .HasForeignKey("SiteVisitReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyHistoryAndOwnership");

                    b.Navigation("Owner");

                    b.Navigation("SiteVisitReview");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SiteVisitReview", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Application");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SiteVisitReviewOwner", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Owner", "Owner")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.SiteVisitReviewOwner", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.SiteVisitReview", "SiteVisitReview")
                        .WithMany("SiteVisitReviewOwners")
                        .HasForeignKey("SiteVisitReviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("SiteVisitReview");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.State", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfile", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileAddress", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfile", "SupplierProfile")
                        .WithMany("AddressList")
                        .HasForeignKey("SupplierProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("SupplierProfile");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileCapability", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfile", "SupplierProfile")
                        .WithOne("ProfileCapability")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.SupplierProfileCapability", "SupplierProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("SupplierProfile");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileCertificationAgency", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.CertificationAgency", "CertificationAgency")
                        .WithMany("ProfileCertificationAgencies")
                        .HasForeignKey("CertificationAgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfileDocument", "Document")
                        .WithMany()
                        .HasForeignKey("SupplierProfileDocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfile", "SupplierProfile")
                        .WithMany("CertificationAgencies")
                        .HasForeignKey("SupplierProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificationAgency");

                    b.Navigation("Document");

                    b.Navigation("SupplierProfile");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileContractReference", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfileAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfileDocument", "Document")
                        .WithMany()
                        .HasForeignKey("SupplierProfileDocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfile", "SupplierProfile")
                        .WithMany("ContractReferenceList")
                        .HasForeignKey("SupplierProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Document");

                    b.Navigation("SupplierProfile");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileDocument", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfile", "SupplierProfile")
                        .WithMany()
                        .HasForeignKey("SupplierProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("SupplierProfile");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfileLegalStructure", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfile", "SupplierProfile")
                        .WithMany("LegalStructureList")
                        .HasForeignKey("SupplierProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierProfile");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.TransportationDetail", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("TransportationDetail")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.TransportationDetail", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "ContractDocument")
                        .WithMany()
                        .HasForeignKey("ContractDocumentId");

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "LeaseDocument")
                        .WithMany()
                        .HasForeignKey("LeaseDocumentId");

                    b.Navigation("Application");

                    b.Navigation("ContractDocument");

                    b.Navigation("LeaseDocument");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.TrustDetail", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithOne("TrustDetail")
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.TrustDetail", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.TrustDetail", "DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany("Vehicles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.Document", "Document")
                        .WithOne()
                        .HasForeignKey("DisabilityInPortal.Domain.Entities.Vehicle", "DocumentId");

                    b.Navigation("Application");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.WorkflowHistoryEvent", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("Application");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NaicsCodeSupplierProfileCapability", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.NaicsCode", null)
                        .WithMany()
                        .HasForeignKey("NaicsCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfileCapability", null)
                        .WithMany()
                        .HasForeignKey("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SicCodeSupplierProfileCapability", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SicCode", null)
                        .WithMany()
                        .HasForeignKey("SicCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfileCapability", null)
                        .WithMany()
                        .HasForeignKey("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupplierProfileCapabilityUkSicCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfileCapability", null)
                        .WithMany()
                        .HasForeignKey("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.UkSicCode", null)
                        .WithMany()
                        .HasForeignKey("UkSicCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupplierProfileCapabilityUnNumberCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfileCapability", null)
                        .WithMany()
                        .HasForeignKey("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.UnNumberCode", null)
                        .WithMany()
                        .HasForeignKey("UnNumberCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupplierProfileCapabilityUnspscCode", b =>
                {
                    b.HasOne("DisabilityInPortal.Domain.Entities.SupplierProfileCapability", null)
                        .WithMany()
                        .HasForeignKey("SupplierProfileCapabilitiesSupplierProfileCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DisabilityInPortal.Domain.Entities.UnspscCode", null)
                        .WithMany()
                        .HasForeignKey("UnspscCodesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.AdditionalDocumentList", b =>
                {
                    b.Navigation("AdditionalDocuments");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Application", b =>
                {
                    b.Navigation("AdditionalDocumentList");

                    b.Navigation("AdditionalInformation");

                    b.Navigation("AddressList");

                    b.Navigation("Affidavit");

                    b.Navigation("ApplicationAssignees");

                    b.Navigation("ApplicationCertificationAgencies");

                    b.Navigation("BankAndCreditReferences");

                    b.Navigation("BusinessRelationships");

                    b.Navigation("Capability");

                    b.Navigation("ContractReferenceList");

                    b.Navigation("DisabilityImpact");

                    b.Navigation("DiversityList");

                    b.Navigation("Equipments");

                    b.Navigation("FinancialSizeInfo");

                    b.Navigation("Invoice");

                    b.Navigation("ManagementAtOutsideFirm");

                    b.Navigation("ManagementChange");

                    b.Navigation("ManagementContributions");

                    b.Navigation("ManagementResponsibility");

                    b.Navigation("Owners");

                    b.Navigation("PaymentDetail");

                    b.Navigation("RealEstate");

                    b.Navigation("TransportationDetail");

                    b.Navigation("TrustDetail");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CertificationAgency", b =>
                {
                    b.Navigation("ApplicationCertificationAgencies");

                    b.Navigation("ProfileCertificationAgencies");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Company", b =>
                {
                    b.Navigation("Contractor");

                    b.Navigation("Documents");

                    b.Navigation("LegalStructureList");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.CompanyHistoryAndOwnership", b =>
                {
                    b.Navigation("SiteVisitOtherOwners");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.DisabilityImpact", b =>
                {
                    b.Navigation("DisabilityImpactDocuments");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.FinancialSizeInfo", b =>
                {
                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("Payment");

                    b.Navigation("PaymentIntents");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.LegalStructure", b =>
                {
                    b.Navigation("LegalStructureDocuments");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementAtOutsideFirm", b =>
                {
                    b.Navigation("OutsideFirmIndividuals");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementChange", b =>
                {
                    b.Navigation("ManagementChangeAgreements");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.ManagementResponsibility", b =>
                {
                    b.Navigation("ManagementResponsibilityOwners");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.OperationAndControl", b =>
                {
                    b.Navigation("Managers");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.RealEstate", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SiteVisitReview", b =>
                {
                    b.Navigation("CommitteeReviewIssues");

                    b.Navigation("CompanyHistoryAndOwnership");

                    b.Navigation("ContributionOfCapitalAndExpertise");

                    b.Navigation("EmployeesCompensation");

                    b.Navigation("Office");

                    b.Navigation("OperationAndControl");

                    b.Navigation("SiteVisitReviewOwners");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Entities.SupplierProfile", b =>
                {
                    b.Navigation("AddressList");

                    b.Navigation("CertificationAgencies");

                    b.Navigation("ContractReferenceList");

                    b.Navigation("LegalStructureList");

                    b.Navigation("ProfileCapability");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DisabilityInPortal.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
